{"version":3,"sources":["components/Titles.js","components/DataRow.js","components/Data.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","headers","map","title","className","DataRow","rowData","Data","results","obj","index","key","Object","keys","console","log","Page","state","csvfile","undefined","allCourses","currFilterType","currFilterValue","hasSubmitted","handleUpload","bind","importCSV","updateData","handleFilterChange","handleFilterSubmit","event","preventDefault","target","files","this","setState","Papa","parse","complete","header","document","getElementById","innerHTML","parsedFile","data","i","length","name","value","items","regex","RegExp","match","push","filter","type","onChange","accept","onClick","id","onSubmit","defaultValue","span","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b44963ba.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Titles(props) {\n    const { headers } = props;\n\n    // Displays the headers\n    return (\n        headers.map((title) => {\n            return (\n                <th className={title}>{title}</th>\n            )\n        })\n    )\n}\n\nexport default Titles;","import React from 'react';\n\nfunction DataRow(props) {\n    const { rowData } = props;\n    const { headers } = props;\n\n    // console.log(\"Inside DataRow\");\n    // console.log(\"rowData = \" + rowData);\n    // console.log(\"headers = \" + headers);\n    // headers.map((title) => {\n    //     console.log(\"Title = \" + title);\n    //     console.log(\"rowData[title] = \" + rowData[title]);\n    // })\n\n    // Loop through the rowData and enter data according to col key\n    return (\n        headers.map((title) => {\n            return (\n                <td>{rowData[title]}</td>\n            )\n        })\n    )\n}\n\nexport default DataRow;","import React from 'react';\nimport DataRow from './DataRow';\n\nfunction Data(props) {\n    const { results } = props;\n\n    // console.log(\"Inside Data\");\n    // console.log(\"Results length = \" + results.length);\n\n    // Loop through every results row and create that row\n    let returnData = results.map((obj, index) => {\n        let key = Object.keys(obj);\n        console.log(\"Key = \" + key);\n        console.log(\"value = \" + obj[key[7]]);\n        return (\n            <tr>\n                <DataRow rowData={obj} headers={key} />\n            </tr>\n        );\n    });\n\n    return returnData;\n}\n\nexport default Data;","import React from \"react\";\nimport Papa from \"papaparse\";\nimport Titles from \"./Titles\";\nimport Data from \"./Data\";\nimport \"./Theme.css\";\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize mutable states\n    this.state = {\n      csvfile: undefined,\n      allCourses: undefined,\n      currFilterType: \"Choose a filter\",\n      currFilterValue: \"\",\n      hasSubmitted: false,\n      results: [],\n      headers: [],\n    };\n\n    // Bind functions that use/change state variables\n    this.handleUpload = this.handleUpload.bind(this);\n    this.importCSV = this.importCSV.bind(this);\n    this.updateData = this.updateData.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleFilterSubmit = this.handleFilterSubmit.bind(this);\n  }\n\n  // Handle uploaded CSV file\n  handleUpload(event) {\n    event.preventDefault();\n    console.log(\"What's the file?\");\n    console.log(event.target.files[0]);\n\n    this.setState({\n      csvfile: event.target.files[0],\n    });\n  }\n\n  // Save submitted CSV file and parses it\n  importCSV() {\n    console.log(\"Pressed button:\");\n    console.log(this.state.csvfile);\n\n    const { csvfile } = this.state;\n    Papa.parse(csvfile, {\n      complete: this.updateData,\n      header: true,\n    });\n    document.getElementById(\"uploadstatus\").innerHTML =\n      \"Uploaded and Processed!\";\n    document.getElementById(\"courses\").innerHTML = \"\";\n  }\n\n  // Cleans parsed data and saves to state\n  updateData(parsedFile) {\n    console.log(\"Inside updateData:\");\n    var data = parsedFile.data;\n\n    // In each course, the last item had an empty string key and no value\n    // Deleting it\n    for (let i = 0; i < data.length; i += 1) {\n      delete data[i][\"\"];\n    }\n\n    this.setState({\n      allCourses: data,\n      headers: Object.keys(data[0]),\n    });\n\n    console.log(data);\n  }\n\n  // Updates state with correct filter values\n  handleFilterChange(event) {\n    const target = event.target;\n    if (target.name === \"filtertype\") {\n      this.setState({ currFilterType: target.value });\n    } else {\n      this.setState({ currFilterValue: target.value });\n    }\n  }\n\n  // Displays the current courses on the webpage\n  handleFilterSubmit(event) {\n    event.preventDefault();\n    console.log(\"In handleFilterSubmit\");\n    console.log(this.state);\n\n    this.setState({ hasSubmitted: true });\n    var items = [];\n    const { allCourses } = this.state;\n    const { currFilterType } = this.state;\n    const { currFilterValue } = this.state;\n\n    // If a file has been uploaded\n    if (allCourses !== undefined) {\n      // Display ONLY if there's a value given\n      if (currFilterValue !== \"\") {\n        const regex = new RegExp(currFilterValue, \"gi\");\n        // If there's a filter chosen, just iterate thru those\n        if (currFilterType !== \"Choose a filter\") {\n          // Find all the courses with that regex\n          for (let i = 0; i < allCourses.length; i += 1) {\n            // Only check entries with defined values\n            if (allCourses[i][currFilterType]) {\n              let val = allCourses[i][currFilterType].match(regex);\n              if (val != null) {\n                items.push(allCourses[i]);\n              }\n            }\n          }\n        }\n        // No filter chosen, iterate thru all courses and filters\n        else {\n          for (let i = 0; i < allCourses.length; i += 1) {\n            for (let filter in allCourses[i]) {\n              // Only check entries with defined values\n              if (allCourses[i][filter]) {\n                let val = allCourses[i][filter].match(regex);\n                if (val != null) {\n                  items.push(allCourses[i]);\n                }\n              }\n            }\n          }\n        }\n        // Update results with information\n        this.setState({ results: items });\n\n        // console.log(this.state);\n      }\n    }\n    // No file uploaded\n    else {\n      this.setState({ hasSubmitted: false });\n      document.getElementById(\"courses\").innerHTML = \"No file uploaded\";\n    }\n  }\n\n  render() {\n    console.log(\"Rendering:\");\n    console.log(this.state);\n\n    const hasSubmitted = this.state.hasSubmitted;\n    const { results } = this.state;\n    const { headers } = this.state;\n\n    return (\n      <div>\n        <h3>Import CSV File</h3>\n        <input\n          className=\"csv-input\"\n          type=\"file\"\n          name=\"file\"\n          onChange={this.handleUpload}\n          accept=\".csv\"\n        />\n        <button onClick={this.importCSV}> Upload now!</button>\n        <pre id=\"uploadstatus\"></pre>\n        <p />\n        <h3>Enter filter</h3>\n        <form onSubmit={this.handleFilterSubmit}>\n          <label>\n            Filter by:\n            <select\n              name=\"filtertype\"\n              value={this.state.currFilterType}\n              onChange={this.handleFilterChange}\n            >\n              <option defaultValue=\"Default\">Choose a filter</option>\n              <option value=\"Subject\">Subject</option>\n              <option value=\"Class Nbr\">Class Number</option>\n              <option value=\"Course Title\">Course Title</option>\n              <option value=\"Units\">Credits</option>\n              <option value=\"Location\">Location</option>\n              <option value=\"Keywords\">Keywords</option>\n            </select>\n          </label>\n          <input\n            type=\"text\"\n            name=\"filtervalue\"\n            value={this.state.currFilterValue}\n            onChange={this.handleFilterChange}\n          />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <br></br>\n        <pre id=\"courses\"></pre>\n        {hasSubmitted && (\n          <table>\n            <colgroup>\n              <col span=\"25\"></col>\n            </colgroup>\n            <thead>\n              <tr>\n                <Titles headers={headers} />\n              </tr>\n            </thead>\n            <tbody>\n              <Data results={results} headers={headers} />\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Page;\n","import React from 'react';\nimport Page from './components/Page.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>ArtsEngine Tool</h1>\n      <br></br>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}